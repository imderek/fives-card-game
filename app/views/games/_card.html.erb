<% 
  # Set base classes for card size and interactivity
  base_classes = (playable) || (defined?(facedown) && facedown) ? 
    'w-[3.7rem] h-[4.7rem] md:w-20 md:h-28 cursor-pointer' : 
    'w-12 h-[4rem] md:w-20 md:h-28'

  # Animation classes for the last card
  animation_classes = (defined?(last) && last && game.winner_id.nil?) ?
    'duration-500 ease-out opacity-0 translate-y-[-20px] animate-card-enter' :
    ''

  # Background classes based on if card is facedown
  bg_classes = defined?(facedown) && facedown ?
    'bg-gradient-to-br from-slate-600 to-slate-800' :
    'border border-white bg-gradient-to-br from-slate-200 from-10% via-white via-30% to-slate-400'

  # Combine all classes
  classes = [
    base_classes,
    animation_classes,
    'relative transition-transform',
    bg_classes,
    'rounded-lg shadow-[0_0_5px_rgba(0,0,0,0.2)]'
  ].join(' ')

  # Data attributes for interactivity
  data_attrs = {
    controller: playable ? "card" : nil,
    card: card&.merge(gameId: game.id)&.to_json,
    action: playable ? "click->card#selectCard" : nil,
    card_target: "cardElement"
  }
%>

<%= content_tag :div, class: classes, data: data_attrs do %>
  <% if defined?(facedown) && facedown %>
    <div class="w-full h-full flex items-center justify-center">
      <svg width="30" height="30" viewBox="0 0 30 30" class="text-slate-500">
        <circle cx="5" cy="9" r="3" fill="currentColor"/>
        <circle cx="15" cy="9" r="3" fill="currentColor"/>
        <circle cx="25" cy="9" r="3" fill="currentColor"/>
        <circle cx="5" cy="21" r="3" fill="currentColor"/>
        <circle cx="15" cy="21" r="3" fill="currentColor"/>
        <circle cx="25" cy="21" r="3" fill="currentColor"/>
      </svg>
    </div>
  <% else %>
    <div class="w-full h-full flex flex-col items-start p-0.5 px-1.5 md:p-2">
      <div class="<%= card[:suit].in?(['♥', '♦']) ? 'text-red-500' : 'text-black' %> text-md md:text-xl">
        <%= card[:value] %><%= card[:suit] %>
      </div>
    </div>
  <% end %>
<% end %>